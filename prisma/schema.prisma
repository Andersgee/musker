// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  //app
  createdAt        DateTime          @default(now())
  handle           String?           @unique
  bio              UserBio?
  sentMessages     Message[]         @relation("sentMessages")
  receivedMessages Message[]         @relation("receivedMessages")
  messageReactions MessageReaction[]
  sentFollows      Follow[]          @relation("sentFollows")
  recievedFollows  Follow[]          @relation("recievedFollows")
  tweets           Tweet[]
  tweetLikes       TweetLike[]
  retweets         Retweet[]
}

model Tweet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  text      String   @db.VarChar(280)

  likes    TweetLike[]
  retweets Retweet[]

  replies          Tweet[] @relation("reply")
  repliedToTweet   Tweet?  @relation("reply", fields: [repliedToTweetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  repliedToTweetId Int?
}

model TweetLike {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   Int

  @@id([userId, tweetId])
}

model Retweet {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   Int

  @@id([userId, tweetId])
}

model UserBio {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  text   String @db.VarChar(280)
}

// app

//the types map to specific types depending on the db provider
//for mysql: Float maps to "DOUBLE" and String maps to varchar(191)
//see https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference
//see relation tables https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations#relation-tables

model Follow {
  createdAt  DateTime @default(now())
  user       User     @relation("recievedFollows", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  follower   User     @relation("sentFollows", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  @@id([userId, followerId])
}

model Message {
  id         String            @id @default(cuid())
  createdAt  DateTime          @default(now())
  author     User              @relation(name: "sentMessages", fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  receiver   User              @relation(name: "receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  reactions  MessageReaction[]
  text       String            @db.VarChar(280)
}

model MessageReaction {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  text      String

  @@id([userId, messageId])
}
